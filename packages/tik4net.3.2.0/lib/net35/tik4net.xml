<?xml version="1.0"?>
<doc>
    <assembly>
        <name>tik4net</name>
    </assembly>
    <members>
        <member name="T:tik4net.Api.ApiConnection.LoginProcessVersion">
            <summary>
            Version of the login process. See https://wiki.mikrotik.com/wiki/Manual:API#Initial_login
            </summary>
        </member>
        <member name="F:tik4net.Api.ApiConnection.LoginProcessVersion.Version1">
            <summary>
            Prior RouterOS version 6.43
            </summary>
        </member>
        <member name="F:tik4net.Api.ApiConnection.LoginProcessVersion.Version2">
            <summary>
            RouterOS version 6.43 and newer
            </summary>
        </member>
        <member name="T:tik4net.ConnectionFactory">
            <summary>
            Factory to create and open mikrotik connection of given type.
            </summary>
        </member>
        <member name="M:tik4net.ConnectionFactory.CreateConnection(tik4net.TikConnectionType)">
            <summary>
            Creates mikrotik Connection of given type.
            </summary>
            <param name="connectionType">Type of technology used to connect to mikrotik router.</param>
            <returns>Instance of mikrotik Connection.</returns>
            <seealso cref="M:tik4net.ITikConnection.Open(System.String,System.String,System.String)"/>
        </member>
        <member name="M:tik4net.ConnectionFactory.OpenConnection(tik4net.TikConnectionType,System.String,System.String,System.String)">
            <summary>
            Creates and opens connection to the specified mikrotik host on default port and perform the logon operation.
            </summary>
            <param name="connectionType">Type of technology used to connect to mikrotik router.</param>
            <param name="host">The host (name or ip).</param>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns>Opened instance of mikrotik Connection.</returns>
            <seealso cref="M:tik4net.ITikConnection.Close"/>
        </member>
        <member name="M:tik4net.ConnectionFactory.OpenConnection(tik4net.TikConnectionType,System.String,System.Int32,System.String,System.String)">
            <summary>
            Creates and opens connection to the specified mikrotik host on specified port and perform the logon operation.
            </summary>
            <param name="connectionType">Type of technology used to connect to mikrotik router.</param>
            <param name="host">The host (name or ip).</param>
            <param name="port">TCPIP port.</param>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <returns>Opened instance of mikrotik Connection.</returns>
            <seealso cref="M:tik4net.ITikConnection.Close"/>
        </member>
        <member name="T:tik4net.Guard">
            <summary>
            Helper class with methods used for checking arguments, type compatibility and so on.
            Main idea comes from MS-CAB.
            </summary>
        </member>
        <member name="M:tik4net.Guard.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:tik4net.Guard.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="M:tik4net.Guard.ArgumentOfType``1(System.Object,System.String)">
            <summary>
            Checks an argumen to ensure it is of given type.
            </summary>
            <typeparam name="TExpectedType">Expected type.</typeparam>
            <param name="argumentValue">The argument value to check.</param>
            <param name="argumentName">The name of the argument.</param>
        </member>
        <member name="T:tik4net.ITikCommand">
            <summary>
            Provides ADO.NET like api to mikrotik router. Should be used inside of opened <seealso cref="T:tik4net.ITikConnection"/>.s
            </summary>
            <seealso cref="T:tik4net.ITikConnection"/>
            <seealso cref="T:tik4net.TikCommandException"/>
        </member>
        <member name="P:tik4net.ITikCommand.Connection">
            <summary>
            Connection assigned to command (used to perform operations on router).
            </summary>
        </member>
        <member name="P:tik4net.ITikCommand.CommandText">
            <summary>
            Comnmand send to router (in mikrotik API format).
            </summary>
        </member>
        <member name="P:tik4net.ITikCommand.IsRunning">
            <summary>
            True when command is already running.
            </summary>
            <seealso cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/>
            <seealso cref="M:tik4net.ITikCommand.Cancel"/>
        </member>
        <member name="P:tik4net.ITikCommand.Parameters">
            <summary>
            Parameters of command (without '=') or filter of query (without '?').
            </summary>
        </member>
        <member name="P:tik4net.ITikCommand.DefaultParameterFormat">
            <summary>
            Default value, how will be command parameters formated in mikrotik request. Could be overriden per parameter.
            </summary>
        </member>
        <member name="M:tik4net.ITikCommand.ExecuteNonQuery">
            <summary>
            Excecutes given <see cref="P:tik4net.ITikCommand.CommandText"/> on router and ensures that operation was sucessfull.
            </summary>
        </member>
        <member name="M:tik4net.ITikCommand.ExecuteScalar">
            <summary>
            Executes given <see cref="P:tik4net.ITikCommand.CommandText"/> on router and ensures that operation returns one value (=ret parameter), which is returned as result.
            </summary>
            <returns>Value returned by router.</returns>
        </member>
        <member name="M:tik4net.ITikCommand.ExecuteSingleRow">
            <summary>
            Executes given <see cref="P:tik4net.ITikCommand.CommandText"/> on router and ensures that operation returns exactly one row (1x !re and 1x !done) as result.
            </summary>
            <returns>Content of !re sentence.</returns>
        </member>
        <member name="M:tik4net.ITikCommand.ExecuteList">
            <summary>
            Executes given <see cref="P:tik4net.ITikCommand.CommandText"/> on router and returns all result sentences (all !re sentences) as result.
            </summary>
            <returns>List of !re sentences</returns>
        </member>
        <member name="M:tik4net.ITikCommand.ExecuteListWithDuration(System.Int32)">
            <summary>
            Executes given <see cref="P:tik4net.ITikCommand.CommandText"/> on router and returns all result sentences (all !re sentences) which are returned during <paramref name="durationSec"/> wait.
            After this period, command is automatically stopped via <see cref="M:tik4net.ITikCommand.Cancel"/>.
            </summary>
            <param name="durationSec">How long will method wait for results.</param>
            <returns>List of !re sentences read.</returns>
            <remarks>If no error occurs, calling this method blocks calling thread for <paramref name="durationSec"/>.</remarks>
        </member>
        <member name="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})">
            <summary>
            Calls given <see cref="P:tik4net.ITikCommand.CommandText"/> to router. Response is returned via <paramref name="oneResponseCallback"/> callback when it is read from mikrotik (for tag, which has been dynamically assigned).
            REMARKS: <paramref name="oneResponseCallback"/> is called from another NON-GUI thread. If you want to show response in UI, 
            you should use some kind of synchronization like BeginInvoke in WinForms or SynchronizationContext. You can not touch UI controls directly without it.
            </summary>
            <param name="oneResponseCallback">Callback called periodically when response sentence is read from mikrotik.</param>
            <param name="errorCallback">Callback called when error occurs (command operation is than ended).</param>
            <seealso cref="M:tik4net.ITikCommand.Cancel"/>
            <seealso cref="T:tik4net.ITikReSentence"/>
        </member>
        <member name="M:tik4net.ITikCommand.AddParameter(System.String,System.String)">
            <summary>
            Adds new instance of parameter to <see cref="P:tik4net.ITikCommand.Parameters"/> list.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value</param>
            <returns>Instance of added parameter.</returns>
        </member>
        <member name="M:tik4net.ITikCommand.AddParameter(System.String,System.String,tik4net.TikCommandParameterFormat)">
            <summary>
            Adds new instance of parameter to <see cref="P:tik4net.ITikCommand.Parameters"/> list.
            </summary>
            <param name="name">Parameter name.</param>
            <param name="value">Parameter value</param>
            <param name="parameterFormat">How will be parameter formated in mikrotik command.</param>
            <returns>Instance of added parameter.</returns>
        </member>
        <member name="M:tik4net.ITikCommand.AddParameterAndValues(System.String[])">
            <summary>
            Adds newly created instances of <see cref="P:tik4net.ITikCommand.Parameters"/>.
            </summary>
            <param name="parameterNamesAndValues">Name and value of parameters for command. (name, value, name2, value2, ..., name9, value9, ...)</param>
            <returns>List of created parameters.</returns>
        </member>
        <member name="M:tik4net.ITikCommand.Cancel">
            <summary>
            Cancells already running async command (should be called on the same instance of <see cref="T:tik4net.ITikCommand"/> on which <see cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/> has been called).
            </summary>
            <seealso cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/>
        </member>
        <member name="M:tik4net.ITikCommand.CancelAndJoin">
            <summary>
            Cancells already running async command (should be called on the same instance of <see cref="T:tik4net.ITikCommand"/> on which <see cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/> has been called)
            Blocks the calling thread until a thread terminates or the specified time elapses,
            while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <seealso cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/>
        </member>
        <member name="M:tik4net.ITikCommand.CancelAndJoin(System.Int32)">
            <summary>
            Cancells already running async command (should be called on the same instance of <see cref="T:tik4net.ITikCommand"/> on which <see cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/> has been called)
            Blocks the calling thread until a thread terminates or the specified time elapses,
            while continuing to perform standard COM and SendMessage pumping.
            </summary>
            <param name="milisecondsTimeout">Wait timeout.</param>
            <returns>True if loading thread ends before given timeout.</returns>
            <seealso cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/>
        </member>
        <member name="T:tik4net.ITikCommandParameter">
            <summary>
            Named parameter used by <see cref="T:tik4net.ITikCommand"/>.
            </summary>
        </member>
        <member name="P:tik4net.ITikCommandParameter.Name">
            <summary>
            Parameter name
            </summary>
        </member>
        <member name="P:tik4net.ITikCommandParameter.Value">
            <summary>
            Parameter value (formated to string as expected by <see cref="T:tik4net.ITikConnection"/>).
            </summary>
        </member>
        <member name="P:tik4net.ITikCommandParameter.ParameterFormat">
            <summary>
            Parameter specific format how will be parameter formated in mikrotik request.
            </summary>
        </member>
        <member name="T:tik4net.ITikConnection">
            <summary>
            Mikrotik Connection. Main object to access mikrotik router.
            Implementation of interface depends on technology that 
            is used to access mikrotik (API, SSH, TELNET, ...).
            <example>
            using(ITikConnection connection = ConnectionFactory.OpenConnection(TikConnectionType.Api, "192.168.1.1", "user", "pass"))
            {
                // ... do work ... 
                // ... do query ...
                Connection.Close();
            }
            </example>
            </summary>
            <seealso cref="T:tik4net.ITikCommand"/>
            <seealso cref="T:tik4net.TikConnectionException"/>
        </member>
        <member name="P:tik4net.ITikConnection.IsOpened">
            <summary>
            Gets a value indicating whether is logged on (<see cref="M:tik4net.ITikConnection.Open(System.String,System.Int32,System.String,System.String)"/>).
            </summary>
            <value><c>true</c> if is logged on; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:tik4net.ITikConnection.Encoding">
            <summary>
            Gets or sets communication encoding (how string values are converted to bytes sent to mikrotik router). Default is ASCII.
            </summary>
        </member>
        <member name="P:tik4net.ITikConnection.SendTimeout">
            <summary>
                Gets or sets the amount of time a ITikConnection will wait for a send operation to complete successfully. In miliseconds.
            </summary>
            <remarks>Must be called before <see cref="M:tik4net.ITikConnection.Open(System.String,System.String,System.String)"/> call.</remarks>
        </member>
        <member name="P:tik4net.ITikConnection.ReceiveTimeout">
            <summary>
                Gets or sets the amount of time a ITikConnection will wait to receive data once a read operation is initiated. In miliseconds.
            </summary>
            <remarks>Must be called before <see cref="M:tik4net.ITikConnection.Open(System.String,System.String,System.String)"/> call.</remarks>
        </member>
        <member name="E:tik4net.ITikConnection.OnReadRow">
            <summary>
            Event called when row (word) from mikrotik is read by connection.
            </summary>
            <remarks>Could be used for debug/logging</remarks>
            <seealso cref="E:tik4net.ITikConnection.OnWriteRow"/>
        </member>
        <member name="E:tik4net.ITikConnection.OnWriteRow">
            <summary>
            Event called when row (word) to mikrotik is written  by connection.
            </summary>
            <remarks>Could be used for debug/logging</remarks>
            <seealso cref="E:tik4net.ITikConnection.OnReadRow"/>
        </member>
        <member name="M:tik4net.ITikConnection.Open(System.String,System.String,System.String)">
            <summary>
            Opens connection to the specified mikrotik host on default port (depends on technology) and perform the logon operation.
            </summary>
            <param name="host">The host.</param>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <seealso cref="M:tik4net.ITikConnection.Close"/>
        </member>
        <member name="M:tik4net.ITikConnection.Open(System.String,System.Int32,System.String,System.String)">
            <summary>
            Opens connection to the specified mikrotik host on specified port and perform the logon operation.
            </summary>
            <param name="host">The host (name or ip).</param>
            <param name="port">TCPIP port.</param>
            <param name="user">The user.</param>
            <param name="password">The password.</param>
            <seealso cref="M:tik4net.ITikConnection.Close"/>
        </member>
        <member name="M:tik4net.ITikConnection.Close">
            <summary>
            Performs the logoff operation and closes connection. Called also via Dispose of connector.
            </summary>
            <seealso cref="M:tik4net.ITikConnection.Open(System.String,System.Int32,System.String,System.String)"/>
        </member>
        <member name="M:tik4net.ITikConnection.CreateCommand">
            <summary>
            Factory method - creates empty command specific for connection type with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.
            </summary>
            <returns>Commend with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.</returns>
        </member>
        <member name="M:tik4net.ITikConnection.CreateCommand(tik4net.TikCommandParameterFormat)">
            <summary>
            Factory method - creates empty command specific for connection type with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.
            </summary>
            <param name="defaultParameterFormat">How will be parameter formated in mikrotik command - default value for command (could be overriden per parameter).</param>
            <returns>Commend with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.</returns>
        </member>
        <member name="M:tik4net.ITikConnection.CreateCommand(System.String,tik4net.ITikCommandParameter[])">
            <summary>
            Factory method - creates command specific for connection type with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.
            Setups <see cref="P:tik4net.ITikCommand.CommandText"/> and <see cref="P:tik4net.ITikCommand.Parameters"/>.
            </summary>
            <param name="commandText">Command text in mikrotik API format</param>
            <param name="parameters">Parameters to be added to newly created command.</param>
            <returns>Commend with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.</returns>
            <seealso cref="M:tik4net.ITikConnection.CreateParameter(System.String,System.String)"/>
        </member>
        <member name="M:tik4net.ITikConnection.CreateCommand(System.String,tik4net.TikCommandParameterFormat,tik4net.ITikCommandParameter[])">
            <summary>
            Factory method - creates command specific for connection type with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.
            Setups <see cref="P:tik4net.ITikCommand.CommandText"/> and <see cref="P:tik4net.ITikCommand.Parameters"/>.
            </summary>
            <param name="commandText">Command text in mikrotik API format</param>
            <param name="defaultParameterFormat">How will be parameter formated in mikrotik command - default value for command (could be overriden per parameter).</param>
            <param name="parameters">Parameters to be added to newly created command.</param>
            <returns>Commend with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.</returns>
        </member>
        <member name="M:tik4net.ITikConnection.CreateCommandAndParameters(System.String,System.String[])">
            <summary>
            Factory method - creates command specific for connection type with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.
            Setups <see cref="P:tik4net.ITikCommand.CommandText"/> and <see cref="P:tik4net.ITikCommand.Parameters"/>.
            </summary>
            <param name="commandText">Command text in mikrotik API format</param>
            <param name="parameterNamesAndValues">Name and value of parameters for command. (name, value, name2, value2, ..., name9, value9, ...)</param>
            <returns>Command with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.</returns>
        </member>
        <member name="M:tik4net.ITikConnection.CreateCommandAndParameters(System.String,tik4net.TikCommandParameterFormat,System.String[])">
            <summary>
            Factory method - creates command specific for connection type with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.
            Setups <see cref="P:tik4net.ITikCommand.CommandText"/> and <see cref="P:tik4net.ITikCommand.Parameters"/>.
            </summary>
            <param name="commandText">Command text in mikrotik API format</param>
            <param name="defaultParameterFormat">How will be parameter formated in mikrotik command - default value for command (could be overriden per parameter).</param>
            <param name="parameterNamesAndValues">Name and value of parameters for command. (name, value, name2, value2, ..., name9, value9, ...)</param>
            <returns>Command with assiged <see cref="P:tik4net.ITikCommand.Connection"/>.</returns>
        </member>
        <member name="M:tik4net.ITikConnection.CreateParameter(System.String,System.String)">
            <summary>
            Factory method - creates parameters instance specific for connection and command type.
            </summary>
            <param name="name">Name of the parameter (without '=')</param>
            <param name="value">Value of the parameter</param>
            <returns>Created parameter with name and value.</returns>
            <seealso cref="P:tik4net.ITikCommand.Parameters"/>
        </member>
        <member name="M:tik4net.ITikConnection.CreateParameter(System.String,System.String,tik4net.TikCommandParameterFormat)">
            <summary>
            Factory method - creates parameters instance specific for connection and command type.
            </summary>
            <param name="name">Name of the parameter (without '=')</param>
            <param name="value">Value of the parameter</param>
            <param name="parameterFormat">How will be parameter formated in mikrotik command.</param>
            <returns>Created parameter with name and value.</returns>
            <seealso cref="P:tik4net.ITikCommand.Parameters"/>
        </member>
        <member name="M:tik4net.ITikConnection.CallCommandSync(System.String[])">
            <summary>
            Calls command to mikrotik (in connection specific format) and waits for response. Command is called without .tag.
            </summary>
            <param name="commandRows">Rows of one command to be send to mikrotik router (in conection specific format).</param>
            <returns>List of returned sentences.</returns>
            <remarks>This is extremly low-level API and should be used only if there is no other way (for example <seealso cref="T:tik4net.ITikCommand"/>).</remarks>
            <seealso cref="T:tik4net.ITikReSentence"/>
            <seealso cref="T:tik4net.ITikDoneSentence"/>
            <seealso cref="T:tik4net.ITikTrapSentence"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteNonQuery"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteScalar"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteSingleRow"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteList"/>
        </member>
        <member name="M:tik4net.ITikConnection.CallCommandSync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Calls command to mikrotik (in connection specific format) and waits for response. Command is called without .tag.
            </summary>
            <param name="commandRows">Rows of one command to be send to mikrotik router (in conection specific format).</param>
            <returns>List of returned sentences.</returns>
            <remarks>This is extremly low-level API and should be used only if there is no other way (for example <seealso cref="T:tik4net.ITikCommand"/>).</remarks>
            <seealso cref="T:tik4net.ITikReSentence"/>
            <seealso cref="T:tik4net.ITikDoneSentence"/>
            <seealso cref="T:tik4net.ITikTrapSentence"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteNonQuery"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteScalar"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteSingleRow"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteList"/>
        </member>
        <member name="M:tik4net.ITikConnection.CallCommandAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{tik4net.ITikSentence})">
            <summary>
            Calls command to mikrotik (in connection specific format). Response is returned via <paramref name="oneResponseCallback"/> callback when it is read from mikrotik (for given <paramref name="tag"/>).
            REMARKS: <paramref name="oneResponseCallback"/> is called from another NON-GUI thread. If you want to show response in UI, 
            you should use some kind of synchronization like BeginInvoke in WinForms. You can not touch UI controls directly without it.
            </summary>
            <param name="commandRows">Rows of one command to be send to mikrotik router (in conection specific format).</param>
            <param name="tag">Tag that allows to perform cancel operation. Should be unique!</param>
            <param name="oneResponseCallback">Callback called periodically when response sentence is read from mikrotik.</param>
            <returns>Loading thread.</returns>
            <remarks>This is extremly low-level API and should be used only if there is no other way (for example <see cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/>).</remarks>
            <seealso cref="T:tik4net.ITikReSentence"/>
            <seealso cref="T:tik4net.ITikDoneSentence"/>
            <seealso cref="T:tik4net.ITikTrapSentence"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/>
        </member>
        <member name="T:tik4net.ITikDoneSentence">
            <summary>
            Response sentence (<see cref="T:tik4net.ITikSentence"/>) from mikrotik router with !done status. 
            It is last sentence from sucessfull operation.
            </summary>
            <seealso cref="T:tik4net.ITikSentence"/>
            <seealso cref="T:tik4net.ITikReSentence"/>
            <seealso cref="T:tik4net.ITikTrapSentence"/>
        </member>
        <member name="M:tik4net.ITikDoneSentence.GetResponseWord">
            <summary>
            Gets the =ret sentence word (result). Throws exception if property with name =ret has not been returned from mikrotik router as part of done sentence.
            </summary>
            <seealso cref="F:tik4net.TikSpecialProperties.Ret"/>        
        </member>
        <member name="T:tik4net.ITikReSentence">
            <summary>
            Response sentence (<see cref="T:tik4net.ITikSentence"/>) from mikrotik router with !re data. 
            It is data sentence (typically when list of entities is requested).
            </summary>
            <seealso cref="T:tik4net.ITikSentence"/>
            <seealso cref="T:tik4net.ITikDoneSentence"/>
            <seealso cref="T:tik4net.ITikTrapSentence"/>
        </member>
        <member name="M:tik4net.ITikReSentence.GetId">
            <summary>
            Gets the .id property. Throws exception if property .id has not been returned from mikrotik router as part of response sentence.
            </summary>
            <returns>Value of the .id property.  =.id=value</returns>
            <exception cref="T:tik4net.TikSentenceException">When word/property has not been found in response sentence.</exception>
            <seealso cref="F:tik4net.TikSpecialProperties.Id"/>
        </member>
        <member name="M:tik4net.ITikReSentence.GetResponseField(System.String)">
            <summary>
            Gets the sentence word (one property). Throws exception if property with given name has not been returned from mikrotik router as part of response sentence.
            </summary>
            <param name="fieldName">Name of the word (property). =name=value</param>
            <returns>Value of the word (property) with given <paramref name="fieldName"/>.  =name=value</returns>
            <exception cref="T:tik4net.TikSentenceException">When word/property has not been found in response sentence.</exception>
        </member>
        <member name="M:tik4net.ITikReSentence.TryGetResponseField(System.String,System.String@)">
            <summary>
            Tries to get the sentence word (one property). Returns false if property with given name has not been returned from mikrotik router as part of response sentence.
            </summary>
            <param name="fieldName">Name of the word (property). =name=value</param>
            <param name="fieldValue">Value of the word (property) with given <paramref name="fieldName"/>.  =name=value</param>
            <returns>True if word (property) with given name has been found - has been returned from mikrotik router as part of response sentence</returns>
        </member>
        <member name="M:tik4net.ITikReSentence.GetResponseFieldOrDefault(System.String,System.String)">
            <summary>
            Gets the sentence word (one property). Resturns <paramref name="defaultValue"/> if property with given name has not been returned from mikrotik router as part of response sentence.
            </summary>
            <param name="fieldName">Name of the word (property). =name=value</param>
            <param name="defaultValue">Default value, which is returned if property with given name has not been returned from mikrotik router as part of response sentence.</param>
            <returns>Value of the word (property) with given <paramref name="fieldName"/> or <paramref name="defaultValue"/>.  =name=value</returns>
        </member>
        <member name="T:tik4net.ITikSentence">
            <summary>
            Base of all sentences returned from mikrotik router as response to request.
            </summary>
        </member>
        <member name="P:tik4net.ITikSentence.Words">
            <summary>
            All sentence words (properties). {fieldName, value}
            </summary>
        </member>
        <member name="P:tik4net.ITikSentence.Tag">
            <summary>
            Tag of sentence (see asynchronous commands fro details).
            </summary>
            <seealso cref="M:tik4net.ITikConnection.CallCommandAsync(System.Collections.Generic.IEnumerable{System.String},System.String,System.Action{tik4net.ITikSentence})"/>
            <seealso cref="M:tik4net.ITikCommand.ExecuteAsync(System.Action{tik4net.ITikReSentence},System.Action{tik4net.ITikTrapSentence})"/>
        </member>
        <member name="T:tik4net.ITikTrapSentence">
            <summary>
            Response sentence (<see cref="T:tik4net.ITikSentence"/>) from mikrotik router with !trap status. 
            This sentence is returned when any error occurs.
            </summary>
            <seealso cref="T:tik4net.ITikSentence"/>
            <seealso cref="T:tik4net.ITikReSentence"/>
            <seealso cref="T:tik4net.ITikDoneSentence"/>
            <seealso cref="T:tik4net.TikCommandException"/>
        </member>
        <member name="P:tik4net.ITikTrapSentence.CategoryCode">
            <summary>
            Code of the error category.
            </summary>
        </member>
        <member name="P:tik4net.ITikTrapSentence.CategoryDescription">
            <summary>
            Readable description of the <see cref="P:tik4net.ITikTrapSentence.CategoryCode"/>. (taken from documentation)
            </summary>
        </member>
        <member name="P:tik4net.ITikTrapSentence.Message">
            <summary>
            Message of the error from mikrotik router.
            </summary>
        </member>
        <member name="T:tik4net.LinqEx">
            <summary>
            IEnumerable extensions.
            </summary>
        </member>
        <member name="M:tik4net.LinqEx.ToDictionaryEx``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0})">
            <summary>
             Creates a Dictionary from an IEnumerable
             according to a specified keySelector function.
            </summary>
        </member>
        <member name="M:tik4net.LinqEx.ToDictionaryEx``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
             Creates a Dictionary from an IEnumerable
             according to a specified keySelector and valueSelector functions.
            </summary>
        </member>
        <member name="T:tik4net.StringHelper">
            <summary>
            Helper class to implement string fuctions from newer .NET - to support .NET 3.5 build.
            </summary>
        </member>
        <member name="M:tik4net.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>
            Indicates whether the specified string is null or an System.String.Empty string or whitespace.
            NOTE: string.IsNullOrWhiteSpace with support for .NET 3.5
            </summary>
            <param name="str">The string to test.</param>
            <returns> true if the value parameter is null or an empty string ("") or whitespace; otherwise, false.</returns>
        </member>
        <member name="T:tik4net.TikCommandException">
            <summary>
            Exception thrown if any error is returned from mikrotik router call or if any commadn related error occurs.
            </summary>
            <seealso cref="T:tik4net.ITikTrapSentence"/>
        </member>
        <member name="P:tik4net.TikCommandException.Command">
            <summary>
            Command which throws error.
            </summary>
        </member>
        <member name="P:tik4net.TikCommandException.Code">
            <summary>
            Code of the error.
            </summary>
            <seealso cref="P:tik4net.ITikTrapSentence.CategoryCode"/>
        </member>
        <member name="P:tik4net.TikCommandException.CodeDescription">
            <summary>
            Code description of the error.
            </summary>
            <seealso cref="P:tik4net.ITikTrapSentence.CategoryDescription"/>
        </member>
        <member name="M:tik4net.TikCommandException.#ctor(tik4net.ITikCommand,System.String)">
            <summary>
            ctor.
            </summary>
            <param name="command">Commant that throws exception.</param>
            <param name="message">Message exception.</param>
        </member>
        <member name="M:tik4net.TikCommandException.#ctor(tik4net.ITikCommand,System.String,System.String,System.String)">
            <summary>
            ctor.
            </summary>
            <param name="command">Commant that throws exception.</param>
            <param name="message">Message exception.</param>
            <param name="code">Code of the error.</param>
            <param name="codeDescription">Code description of the error.</param>
        </member>
        <member name="M:tik4net.TikCommandException.#ctor(tik4net.ITikCommand,tik4net.ITikTrapSentence)">
            <summary>
            ctor.
            </summary>
            <param name="command">Commant that throws exception.</param>
            <param name="trapSentence">Error=trap sentence returned from mikrotik router as response to <paramref name="command"/> call.</param>
        </member>
        <member name="M:tik4net.TikCommandException.ToString">
            <summary>
            Returns exception description.
            </summary>
            <returns>Exception description.</returns>
        </member>
        <member name="T:tik4net.TikCommandParameterFormat">
            <summary>
            How parameter will be formated in mikrotik request
            </summary>
        </member>
        <member name="F:tik4net.TikCommandParameterFormat.Default">
            <summary>
            Depends on <see cref="P:tik4net.ITikCommand.DefaultParameterFormat"/> (or on method which is executed on command).
            </summary>
        </member>
        <member name="F:tik4net.TikCommandParameterFormat.Filter">
            <summary>
            Format: ?name=value  (query).
            </summary>
        </member>
        <member name="F:tik4net.TikCommandParameterFormat.NameValue">
            <summary>
            Format: =name=value (set, execute)
            </summary>
        </member>
        <member name="T:tik4net.TikConnectionCommCallbackEventArgs">
            <summary>
            EventArgs used to pass written or read WORD to/from mikrotik router by <see cref="T:tik4net.ITikConnection"/>.
            </summary>
        </member>
        <member name="P:tik4net.TikConnectionCommCallbackEventArgs.Word">
            <summary>
            Read or written WORD by <see cref="T:tik4net.ITikConnection"/>.
            </summary>
        </member>
        <member name="M:tik4net.TikConnectionCommCallbackEventArgs.#ctor(System.String)">
            <summary>
            ctor
            </summary>
            <param name="word">Read or written WORD by <see cref="T:tik4net.ITikConnection"/></param>
        </member>
        <member name="T:tik4net.TikConnectionException">
            <summary>
            Any exception from mikrotik session.
            </summary>
        </member>
        <member name="M:tik4net.TikConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:tik4net.TikConnectionException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:tik4net.TikConnectionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:tik4net.TikConnectionException"/> class.
            </summary>
        </member>
        <member name="M:tik4net.TikConnectionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:tik4net.TikConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:tik4net.TikConnectionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:tik4net.TikConnectionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:tik4net.TikConnectionException.#ctor(System.String,tik4net.ITikCommand)">
            <summary>
            Initializes a new instance of the <see cref="T:tik4net.TikConnectionException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="command">The command sent to target.</param>
        </member>
        <member name="M:tik4net.TikConnectionException.#ctor(System.String,tik4net.ITikCommand,tik4net.ITikSentence)">
            <summary>
            Initializes a new instance of the <see cref="T:tik4net.TikConnectionException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="command">The command sent to target.</param>
            <param name="response">The response from target.</param>
        </member>
        <member name="M:tik4net.TikConnectionException.#ctor(System.String,tik4net.ITikCommand,System.Collections.Generic.IEnumerable{tik4net.ITikSentence})">
            <summary>
            Initializes a new instance of the <see cref="T:tik4net.TikConnectionException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="command">The command sent to target.</param>
            <param name="responseList">The response from target.</param>
        </member>
        <member name="T:tik4net.TikConnectionType">
            <summary>
            Connection type used to access mikrotik router. Default is <see cref="F:tik4net.TikConnectionType.Api"/>.
            </summary>
        </member>
        <member name="F:tik4net.TikConnectionType.Api">
            <summary>
            Mikrotik API connection - default value.
            </summary>
        </member>
        <member name="F:tik4net.TikConnectionType.ApiSsl">
            <summary>
            Mikrotik API-SSL connection (supports only mode with certificate on mikrotik). See https://github.com/danikf/tik4net/wiki/SSL-connection for details.
            </summary>
        </member>
        <member name="F:tik4net.TikConnectionType.Api_v2">
            <summary>
            Mikrotik API connection for then RouterOS version 6.43 and newer.
            </summary>
        </member>
        <member name="F:tik4net.TikConnectionType.ApiSsl_v2">
            <summary>
            Mikrotik API-SSL connection for then RouterOS version 6.43 and newer. (supports only mode with certificate on mikrotik). See https://github.com/danikf/tik4net/wiki/SSL-connection for details. 
            </summary>
        </member>
        <member name="F:tik4net.TikConnectionType.Ssh">
            <summary>
            SSH connection - NOT IMPLEMENTED YET.
            </summary>
        </member>
        <member name="F:tik4net.TikConnectionType.Telnet">
            <summary>
            Telnet connection - NOT IMPLEMENTED YET.
            </summary>
        </member>
        <member name="T:tik4net.TikSentenceException">
            <summary>
            Exception called when response sentence from mikrotik router is not in proper format.
            </summary>
        </member>
        <member name="P:tik4net.TikSentenceException.Sentence">
            <summary>
            Sentence with error - not proper format.
            </summary>
        </member>
        <member name="M:tik4net.TikSentenceException.#ctor(System.String,tik4net.ITikSentence)">
            <summary>
            ctor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="sentecne">Sentence with error - not proper format.</param>
        </member>
        <member name="T:tik4net.TikSpecialProperties">
            <summary>
            Names of well known properties (set of constants)
            </summary>
        </member>
        <member name="F:tik4net.TikSpecialProperties.Id">
            <summary>
            Id property = .id
            </summary>
        </member>
        <member name="F:tik4net.TikSpecialProperties.Proplist">
            <summary>
            Proplist property = .proplist
            </summary>
        </member>
        <member name="F:tik4net.TikSpecialProperties.Tag">
            <summary>
            .tag property - used to correlate simultaneous command responses.
            </summary>
        </member>
        <member name="F:tik4net.TikSpecialProperties.UnsetValueName">
            <summary>
            value-name property used to set name of unset field in unset command
            </summary>
        </member>
        <member name="F:tik4net.TikSpecialProperties.Ret">
            <summary>
            Return value from =done sentence. See <see cref="T:tik4net.ITikDoneSentence"/>
            </summary>
        </member>
        <member name="T:tik4net.TikTimeHelper">
            <summary>
            Functions to convert MikroTik timespans to useable formats.
            Credits: D-Bullock 
            </summary>
        </member>
        <member name="M:tik4net.TikTimeHelper.ToTikTime(System.Nullable{System.Int32})">
            <summary>
            Convert the seconds passed in to a MikroTik time string
            </summary>
            <param name="seconds"></param>
            <returns>A string in the format the MikroTik expects for it's timespan fields</returns>
        </member>
        <member name="M:tik4net.TikTimeHelper.ToTikTime(System.Nullable{System.Int64})">
            <summary>
            Convert the seconds passed in to a MikroTik time string
            </summary>
            <param name="seconds"></param>
            <returns>A string in the format the MikroTik expects for it's timespan fields</returns>
        </member>
        <member name="M:tik4net.TikTimeHelper.FromTikTimeToSeconds(System.String)">
            <summary>
            Convert a MikroTik time string to seconds
            </summary>
            <param name="time">The time as specified by MikroTik</param>
            <returns></returns>
        </member>
        <member name="M:tik4net.TikTimeHelper.FromTikTimeToTimeSpan(System.String)">
            <summary>
            Convert a MikroTik time string to TimeSpan
            </summary>
            <param name="time">The time as specified by MikroTik</param>
            <returns></returns>
        </member>
    </members>
</doc>
